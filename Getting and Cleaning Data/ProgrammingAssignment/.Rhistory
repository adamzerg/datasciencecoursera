, select = c(1, 2, 4, 5)
, col.names=c("CountryCode", "Rank", "Economy", "Total")
)
# Download data and read FGDP data into data.table
FEDSTATS_Country <- data.table::fread('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv'
)
FGDP
FEDSTATS_Country
mergedDT <- merge(FGDP, FEDSTATS_Country, by = 'CountryCode')
# How many of the IDs match?
nrow(mergedDT)
mergedDT
mergedDT[order(-Rank)][13,.(Economy)]
arrange(mergedDT, desc(Economy)
)
arrange(mergedDT, desc(Total))
arrange(select(mergedDT,-Rank), desc(Total))
arrange(mergedDT, desc(rank))
arrange(mergedDT, desc(Rank))
mergedDT[order(-Rank)][13,.(Economy)]
mergedDT
mergedDT[`Income Group` == "High income: OECD"
, lapply(.SD, mean)
, .SDcols = c("Rank")
, by = "Income Group"]
mergedDT[`Income Group` == "High income: nonOECD"
, lapply(.SD, mean)
, .SDcols = c("Rank")
, by = "Income Group"]
arrange(mergedDT, desc(Rank))[13, Economy]
arrange(mergedDT, desc(Rank))[13, .Economy]
arrange(mergedDT, desc(Rank))[13, .(Economy)]
arrange(mergedDT, desc(Rank))[13,.(Economy)]
arrange(mergedDT, desc(Rank))[13,(Economy)]
arrange(mergedDT, desc(Rank))[13,Economy]
arrange(mergedDT, desc(Rank))
arrange(mergedDT, desc(Rank))[13, Economy]
tapply(merge$Rank, merge$`Income Group`, mean)
tapply(merge$Rank, merge$"Income Group, mean)
tapply(merge$Rank, merge$'Income Group', mean)
tapply(merge$Rank, merge$'Income Group', mean))
)
)
)
exit
arrange(mergedDT, desc(rank))
break()
arrange(mergedDT, desc(Total))
tapply(merge$Rank, merge$'Income Group', mean))
tapply(merge$Rank, merge$'Income Group', mean)
result<- result[!is.na(result[,2]),]
tapply(result$Rank,result$Income.Group,mean)
tapply(mergedDT$Rank, mergedDT$'Income Group', mean)
mergedDT$RankGroups <- cut(mergedDT$Rank, breaks = 5)
table(mergedDT$RankGroups, mergedDT$'Income Group')
mergedDT$RankGroups
mergedDT
table(mergedDT$RankGroups, mergedDT$'Income Group')
mergedDT$Rank
cut(mergedDT$Rank, breaks = 5)
table(mergedDT$RankGroups, mergedDT$'Income Group')
q()
swirl()
library(swirl)
swirl()
mean(c(2,4,5))
source('C:/Users/adam/AppData/Local/Temp/RtmpC45o4J/boring_function.R')
submit()
boring_function('My first function!')
boring_function
main()
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(pacakage = lubridate)
help(package = lubridate)
today()
this_day <- today()
this_day
month(this_day)
wday(this_day)
wday(this_day, label=TRUE)
now()
this_moment <- now()
this_moment
second(this_moment)
ymd_hms("1989-05-17")
ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May17")
ymd("1989 May 17")
ymd("March 12, 1975")
mdy("March 12, 1975")
dmy(25081985)
ymd(192012)
ymd("192012")
ymd("//192012")
ymd("19201/2")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
update(this_moment, hours = 12, minutes = 59, seconds = 55)
this_moment <- update(this_moment, hours = 12, minutes = 59, seconds = 55)
this_moment
now()
nyc <- now("America/New_Yor")
nyc <- now("America/New_York")
nyc
depart <- nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 59)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrival <- depart + hours(15) + minute(50)
arrive <- depart + hours(15) + minute(50)
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, Asia/Hong_Kong)
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", "Singapore")
last_time = mdy("June 17, 2008", tz="Singapore")
last_time <- mdy("June 17, 2008", tz="Singapore")
last_time
?interval
how_long <- interval(last_time, arrive)
how_long
as.Period(how_long)
as.period(how_long)
stopwatch()
source('~/GitHub/datasciencecoursera/Getting and Cleaning Data/ProgrammingAssignment/run_analysis.R')
library(reshape2)
source('~/GitHub/datasciencecoursera/Getting and Cleaning Data/ProgrammingAssignment/run_analysis.R')
source('~/GitHub/datasciencecoursera/Getting and Cleaning Data/ProgrammingAssignment/run_analysis.R')
row_labels
column_labels = colnames(measurement[1,3])
column_labels
column_labels = colnames(measurement[1:3])
column_labels
melt(measurment, id = column_labels, measure.vars = row_lables)
melt(measurement, id = column_labels, measure.vars = row_lables)
melt(measurement, id = column_labels, measure.vars = row_labels)
normalize_measure = melt(measurement, id = column_labels, measure.vars = row_labels)
tidy_data = dcast(normalize_measure, subject + activity ~ variable, mean)
tidy_data = dcast(normalize_measure, subject_id + activity ~ variable, mean)
tidy_data
group_by(measurement, subject_id, activity)
install.packages("dplyr")
library(dplyr)
group_by(measurement, subject_id, activity)
ddply(measurement, column_labels, numcolwise(mean))
library(plyr)
ddply(measurement, column_labels, numcolwise(mean))
source('~/GitHub/datasciencecoursera/Getting and Cleaning Data/ProgrammingAssignment/run_analysis.R')
source('~/GitHub/datasciencecoursera/Getting and Cleaning Data/ProgrammingAssignment/run_analysis.R')
ddply(measurement, column_labels, numcolwise(mean))
tidy_data
write.table(tidy_data, file = "./tidy_data.txt")
column_labels = colnames(measurement[1,3])
row_labels = colnames(measurement[4:ncol(measurement)])
normalize_measure = melt(measurement, id = column_labels, measure.vars = row_labels)
tidy_data = dcast(normalize_measure, subject_id + activity ~ variable, mean)
#group_by(measurement, subject_id, activity)
tidy_data2 <- ddply(measurement, column_labels, numcolwise(mean))
write.table(tidy_data, file = "./tidy_data.txt")
write.table(tidy_data2, file = "./tidy_data2.txt")
dcast(normalize_measure, subject_id + activity ~ variable, mean)
?dcast
normalize_measure
column_labels
column_labels = colnames(measurement[1:3])
row_labels = colnames(measurement[4:ncol(measurement)])
normalize_measure = melt(measurement, id = column_labels, measure.vars = row_labels)
tidy_data = dcast(normalize_measure, subject_id + activity ~ variable, mean)
#group_by(measurement, subject_id, activity)
tidy_data2 <- ddply(measurement, column_labels, numcolwise(mean))
write.table(tidy_data, file = "./tidy_data.txt")
write.table(tidy_data2, file = "./tidy_data2.txt")
colnames(normalize_measure)
column_labels = colnames(measurement[1:3])
row_labels = colnames(measurement[4:ncol(measurement)])
normalize_measure = melt(measurement, id = column_labels, measure.vars = row_labels)
tidy_data = dcast(normalize_measure, subject_id + activity_id + activity ~ variable, mean)
#group_by(measurement, subject_id, activity)
tidy_data2 <- ddply(measurement, column_labels, numcolwise(mean))
write.table(tidy_data, file = "./tidy_data.txt")
write.table(tidy_data2, file = "./tidy_data2.txt")
source('~/GitHub/datasciencecoursera/Getting and Cleaning Data/ProgrammingAssignment/run_analysis.R')
setwd("~/GitHub/datasciencecoursera/Getting and Cleaning Data/ProgrammingAssignment")
source('~/GitHub/datasciencecoursera/Getting and Cleaning Data/ProgrammingAssignment/run_analysis.R')
?write.table
write.table(tidy_data, file = "./tidy_data.txt", row.names = FALSE)
write.table(tidy_data, file = "./tidy_data.txt", row.names = FALSE)
write.table(tidy_data2, file = "./tidy_data2.txt", row.names = FALSE)
?filter
head(arrange(measurement, subject))
head(arrange(measurement, subject=1, activity=2))
head(arrange(measurement, subject=1 and activity=2))
filter(measurement, subject_id = 1)
filter(measurement, subject_id == 1)
filter(measurement, subject_id == 1 and activity == 1)
filter(measurement, subject_id == 1, activity == 1)
filter(measurement, subject_id == 1 & activity == 1)
head(measurement)
filter(measurement, subject_id == 1 & activity_id == 1)
filter(measurement, subject_id == 1 & activity_id == 2)
filter(measurement, subject_id == 1 & activity_id == 3)
filter(measurement, subject_id == 1 & activity_id == 4)
filter(measurement, subject_id == 1 & activity_id == 6)
filter(measurement, subject_id == 2 & activity_id == 2)
filter(measurement, subject_id == 2 & activity_id == 1)
filter(measurement, subject_id == 2 & activity_id == 3)
filter(measurement, subject_id == 2 & activity_id == 4)
filter(measurement, subject_id == 2 & activity_id == 5)
setwd("~/GitHub/datasciencecoursera/R workspace")
# Download the zip file if it does not exist already, then unzip it
uci_data <- "File.zip"
if (!file.exists(uci_data)){
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(url, uci_data)}
if (!file.exists("UCI HAR Dataset")){
unzip(uci_data)}
# Read the text files from the main folder and save it in the features and activities tables.
# Descriptive names are given to the variables (as required by step 4 of the assignement).
# Then the process is repeated for the files contained in the test and train folders
features <- read.table("./UCI HAR Dataset/features.txt", col.names = c("n", "functions"))
activities <- read.table("./UCI HAR Dataset/activity_labels.txt", col.names = c("id", "activity"))
subject_test <- read.table("./UCI HAR Dataset/test/subject_test.txt", col.names = ("subject"))
y_test <- read.table("./UCI HAR Dataset/test/y_test.txt", col.names = c("code"))
subject_train <- read.table("./UCI HAR Dataset/train/subject_train.txt", col.names = ("subject"))
y_train <- read.table("./UCI HAR Dataset/train/y_train.txt", col.names = ("code"))
# The values from the function columns in the features table are also used to name the columns
# of these files
x_test <- read.table("./UCI HAR Dataset/test/X_test.txt", col.names = features$functions)
x_train <- read.table("./UCI HAR Dataset/train/X_train.txt", col.names = features$functions)
# Merge tables obtained in the previous steps
x <- rbind(x_train, x_test); y <- rbind(y_train, y_test)
subject <- rbind(subject_train, subject_test)
full_data <- cbind(subject, y, x)
# Extract columns that contain the mean and the standard deviation of the measurements u
tidy_data <- select(subject, code, contains("mean"), contains("std"))
# Use descriptive names to name the activities in the data set (the columns were already assigned
# some descriptive names when read with read.tables)
tidy_data$code <- activities[tidy_data$code, 2]
# Rename using descriptive variable names
tidy_data <- tidy_data %>% rename(Activity = code)
# From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
final_tidy_data <- tidy_data %>% group_by(Activity, subject) %>% summarise_all(funs(mean))
write.table(final_tidy_data, "Final.txt", row.names = FALSE)
head(tidy_data)
filter(final_tidy_data, subject == 2 & activity == 5)
filter(tidy_data, subject == 2 & activity == 5)
filter(tidy_data, subject == 2)
library(tidyverse)
# upload raw data ---------------------------------------------------------
feat_list <- read_table("./UCI HAR Dataset/features.txt", col_names = c("features"), col_types = "c")
activity_labels <-
read_table(
"./UCI HAR Dataset/activity_labels.txt",
col_names = c("activity_id", "activity"),
col_types = cols(activity_id = col_integer(), activity = col_character())
) %>%
mutate(activity = tolower(activity))
# set data
data_train <- read_table("./UCI HAR Dataset/train/X_train.txt",  col_names = c(feat_list$features))
data_test <- read_table("./UCI HAR Dataset/test/X_test.txt", col_names = c(feat_list$features))
# labels data
train_labels <-
read_table(
"./UCI HAR Dataset/train/y_train.txt",
col_names = c("activity_id"),
col_types = "i"
)
test_labels <-
read_table(
"./UCI HAR Dataset/test/y_test.txt",
col_names = c("activity_id"),
col_types = "i"
)
# subjects data
train_subject <-
read_table(
"./UCI HAR Dataset/train/subject_train.txt",
col_names = c("subject"),
col_types = "i"
)
test_subject <-
read_table(
"./UCI HAR Dataset/test/subject_test.txt",
col_names = c("subject"),
col_types = "i"
)
# merge data sets ---------------------------------------------------------
data_train <- data_train %>% bind_rows(data_test)
train_labels <- train_labels %>% bind_rows(test_labels)
train_subject <- train_subject %>% bind_rows(test_subject)
full_set <-
data_train %>%
bind_cols(train_labels, train_subject) %>%
left_join(
activity_labels,
by = c("activity_id" = "activity_id")
)
# select mean and std cols ------------------------------------------------
full_set <-
full_set %>%
select(subject, activity, matches("[Mm]ean"), matches("[Ss]td"))
# rename variables --------------------------------------------------------
col_name <-
names(full_set) %>%
str_to_lower() %>%
str_replace_all(
c(
"\\-" = "\\_",
"\\(\\)" = "",
"(?<=[a-zA-Z])\\(" = "_",
"\\," = "\\_",
"\\)$" = "",
"\\)(?=[:punct:])" = "",
"[0-9]{1,3} " = "",
"(?<=body)body" = "",
"acc(?=[a-z])" = "acc_",
"gyro(?=[a-z])" = "gyro_",
"^t" = "time_",
"^f" = "fourier_",
"body(?=[a-z])" = "body_",
"gravity(?=[a-z])" = "gravity_",
"mean(?=[a-z])" = "mean_",
"jerk(?=[a-z])" = "jerk_"
)
)
full_set <-
full_set %>%
magrittr::set_colnames(col_name)
# create a new tidy data set ----------------------------------------------
# the txt file can be read with base R read.table(header = TRUE)
new_set <-
full_set %>%
group_by(subject, activity) %>%
summarise_all(mean, na.rm = TRUE)
as.data.frame(new_set) %>%
write.table("tidy_data_set.txt")
source('~/GitHub/datasciencecoursera/Getting and Cleaning Data/ProgrammingAssignment/run_analysis.R')
colnames(tidy_data)
source('~/GitHub/datasciencecoursera/Getting and Cleaning Data/ProgrammingAssignment/run_analysis.R')
measure_train <- cbind(subject_train, y_train, X_train)
measure_test <- cbind(subject_test, y_test, X_test)
measurement <- rbind(measure_train, measure_test)
head(measure)
head(measurementg)
head(measurement)
measure_train <- cbind(subject_train, y_train, X_train)
measure_test <- cbind(subject_test, y_test, X_test)
measurement <- rbind(measure_train, measure_test)
## 5. Appropriately labels the data set with descriptive variable names
feature_label <- features[, 2]
feature_label <- gsub("^t", "Time", feature_label)
feature_label <- gsub("^f", "Frequency", feature_label)
feature_label <- gsub("BodyBody", "Body", feature_label)
feature_label <- gsub("mean", "Mean", feature_label)
feature_label <- gsub("std", "Std", feature_label)
feature_label <- gsub("Acc", "Acceleration", feature_label)
feature_label <- gsub("Freq", "Frequency", feature_label)
feature_label <- gsub("Mag", "Magnitude", feature_label)
feature_label <- gsub("angle", "Angle", feature_label)
feature_label <- gsub("gravity", "Gravity", feature_label)
feature_label <- gsub(",|-|\\(|\\)", "", feature_label)
colnames(measurement) <- c('activity_id','activity',feature_label)
colnames(measurement)
?mutate
activity
activity_labels
merge(activity_labels, measurement)
colnames(activity_labels)
colnames(measurement)
measure_train <- cbind(subject_train, y_train, X_train)
measure_test <- cbind(subject_test, y_test, X_test)
measurement <- rbind(measure_train, measure_test)
## 5. Appropriately labels the data set with descriptive variable names
feature_label <- features[, 2]
feature_label <- gsub("^t", "Time", feature_label)
feature_label <- gsub("^f", "Frequency", feature_label)
feature_label <- gsub("BodyBody", "Body", feature_label)
feature_label <- gsub("mean", "Mean", feature_label)
feature_label <- gsub("std", "Std", feature_label)
feature_label <- gsub("Acc", "Acceleration", feature_label)
feature_label <- gsub("Freq", "Frequency", feature_label)
feature_label <- gsub("Mag", "Magnitude", feature_label)
feature_label <- gsub("angle", "Angle", feature_label)
feature_label <- gsub("gravity", "Gravity", feature_label)
feature_label <- gsub(",|-|\\(|\\)", "", feature_label)
colnames(measurement) <- c('activity_id',feature_label)
colnames(activity_labels) <- c('activity_id','activity')
merge(activity_labels, measurement)
colnames(measurement)
measure_train <- cbind(subject_train, y_train, X_train)
measure_test <- cbind(subject_test, y_test, X_test)
measurement <- rbind(measure_train, measure_test)
## 5. Appropriately labels the data set with descriptive variable names
feature_label <- features[, 2]
feature_label <- gsub("^t", "Time", feature_label)
feature_label <- gsub("^f", "Frequency", feature_label)
feature_label <- gsub("BodyBody", "Body", feature_label)
feature_label <- gsub("mean", "Mean", feature_label)
feature_label <- gsub("std", "Std", feature_label)
feature_label <- gsub("Acc", "Acceleration", feature_label)
feature_label <- gsub("Freq", "Frequency", feature_label)
feature_label <- gsub("Mag", "Magnitude", feature_label)
feature_label <- gsub("angle", "Angle", feature_label)
feature_label <- gsub("gravity", "Gravity", feature_label)
feature_label <- gsub(",|-|\\(|\\)", "", feature_label)
colnames(measurement) <- c('subject_id','activity_id',feature_label)
colnames(activity_labels) <- c('activity_id','activity')
merge(activity_labels, measurement)
## 6. Extracts only the measurements on the mean and standard deviation for each measurement
measurement <- measurement[, grep("Mean|Std", colnames(measurement))]
colnames(measurement)
source('~/GitHub/datasciencecoursera/Getting and Cleaning Data/ProgrammingAssignment/run_analysis.R')
merge(activity_labels, measurement)
## 4. Merge training and the test sets
measure_train <- cbind(subject_train, y_train, X_train)
measure_test <- cbind(subject_test, y_test, X_test)
measurement <- rbind(measure_train, measure_test)
## 5. Appropriately labels the data set with descriptive variable names
feature_label <- features[, 2]
feature_label <- gsub("^t", "Time", feature_label)
feature_label <- gsub("^f", "Frequency", feature_label)
feature_label <- gsub("BodyBody", "Body", feature_label)
feature_label <- gsub("mean", "Mean", feature_label)
feature_label <- gsub("std", "Std", feature_label)
feature_label <- gsub("Acc", "Acceleration", feature_label)
feature_label <- gsub("Freq", "Frequency", feature_label)
feature_label <- gsub("Mag", "Magnitude", feature_label)
feature_label <- gsub("angle", "Angle", feature_label)
feature_label <- gsub("gravity", "Gravity", feature_label)
feature_label <- gsub(",|-|\\(|\\)", "", feature_label)
colnames(measurement) <- c('subject_id','activity_id',feature_label)
colnames(activity_labels) <- c('activity_id','activity')
## 6. Extracts only the measurements on the mean and standard deviation for each measurement
measurement <- measurement[, grep("subject_id|activity_id|Mean|Std", colnames(measurement))]
colnames(measurement)
merge(activity_labels, measurement)
measurement <- merge(activity_labels, measurement)
nrow(subject)
nrow(activity)
nrow(measurement)
## 8. Creates an independent tidy data set with the average of each variable for each activity and each subject
column_labels = colnames(measurement[1:3])
row_labels = colnames(measurement[4:ncol(measurement)])
normalize_measure = melt(measurement, id = column_labels, measure.vars = row_labels)
tidy_data = dcast(normalize_measure, subject_id + activity_id + activity ~ variable, mean)
#group_by(measurement, subject_id, activity)
tidy_data2 <- ddply(measurement, column_labels, numcolwise(mean))
write.table(tidy_data, file = "./tidy_data.txt", row.names = FALSE)
write.table(tidy_data2, file = "./tidy_data2.txt", row.names = FALSE)
setwd("~/GitHub/datasciencecoursera/Getting and Cleaning Data/ProgrammingAssignment")
write.table(tidy_data, file = "./tidy_data.txt", row.names = FALSE)
write.table(tidy_data2, file = "./tidy_data2.txt", row.names = FALSE)
column_labels = colnames(measurement[1:3])
row_labels = colnames(measurement[4:ncol(measurement)])
normalize_measure = melt(measurement, id = column_labels, measure.vars = row_labels)
tidy_data = dcast(normalize_measure, activity_id + activity + subject_id~ variable, mean)
#group_by(measurement, subject_id, activity)
tidy_data2 <- ddply(measurement, column_labels, numcolwise(mean))
write.table(tidy_data, file = "./tidy_data.txt", row.names = FALSE)
write.table(tidy_data2, file = "./tidy_data2.txt", row.names = FALSE)
column_labels
source('~/GitHub/datasciencecoursera/Getting and Cleaning Data/ProgrammingAssignment/run_analysis.R')
tidy_data[c(3,2,4:ncol(tidy_data))]
tidy_data_t <- tidy_data[c(3,2,4:ncol(tidy_data))]
write.table(tidy_data_t, file = "./tidy_data_t.txt", row.names = FALSE)
tidy_data_t <- arrange(tidy_data[c(3,2,4:ncol(tidy_data))],1)
write.table(tidy_data_t, file = "./tidy_data_t.txt", row.names = FALSE)
tidy_data_t <- arrange(tidy_data[c(3,2,4:ncol(tidy_data))], "subject_id")
write.table(tidy_data_t, file = "./tidy_data_t.txt", row.names = FALSE)
arrange(tidy_data_t, 1)
tidy_data
tidy_data_t
arrange(tidy_data_t, subject_id)
tidy_data_t <- arrange(tidy_data[c(3,2,4:ncol(tidy_data))], "subject_id")
write.table(arrange(tidy_data_t, subject_id), file = "./tidy_data_t.txt", row.names = FALSE)
tidy_data_t <- tidy_data[c(3,2,4:ncol(tidy_data))]
write.table(arrange(tidy_data_t, subject_id), file = "./tidy_data_t.txt", row.names = FALSE)
column_labels = colnames(measurement[1:3])
row_labels = colnames(measurement[4:ncol(measurement)])
normalize_measure = melt(measurement, id = column_labels, measure.vars = row_labels)
tidy_data = dcast(normalize_measure, activity_id + activity + subject_id~ variable, mean)
tidy_data_arrange <- tidy_data[c(3,2,4:ncol(tidy_data))]
write.table(arrange(tidy_data_arrange, subject_id), file = "./tidy_data.txt", row.names = FALSE)
#group_by(measurement, subject_id, activity)
tidy_data2 <- ddply(measurement, column_labels, numcolwise(mean))
write.table(tidy_data2, file = "./tidy_data2.txt", row.names = FALSE)
setwd("~/GitHub/datasciencecoursera/Getting and Cleaning Data/ProgrammingAssignment")
setwd("~/GitHub/datasciencecoursera/Getting and Cleaning Data/ProgrammingAssignment")
column_labels = colnames(measurement[1:3])
row_labels = colnames(measurement[4:ncol(measurement)])
normalize_measure = melt(measurement, id = column_labels, measure.vars = row_labels)
tidy_data = dcast(normalize_measure, activity_id + activity + subject_id~ variable, mean)
tidy_data_arrange <- tidy_data[c(3,2,4:ncol(tidy_data))]
write.table(arrange(tidy_data_arrange, subject_id), file = "./tidy_data.txt", row.names = FALSE)
#group_by(measurement, subject_id, activity)
tidy_data2 <- ddply(measurement, column_labels, numcolwise(mean))
write.table(tidy_data2, file = "./tidy_data2.txt", row.names = FALSE)
