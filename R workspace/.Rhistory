arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, pacakge, size)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb/ 1024)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size+1000)
summarize(cran, avg_bytes = mean(siz))
summarize(cran, avg_bytes = mean(size))
main()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
group_by()
?group_by()
?group_by
cran
by_package <- group_by(cran, pacakge)
by_package <- group_by(cran, package)
by_pacakge
by_package
summarize(by_pacakge, avg_bytes = mean(size))
summarize(by_package, avg_bytes = mean(size))
summarize(by_package, mean(size))
source('C:/Users/adam/AppData/Local/Temp/RtmpYp186b/summarize1.R')
submit()
pack_sum
summarize(by_package, quantile(pack_sum$count, probs = 0.99))
quantile(pack_sum$count, probs = 0.99)
filter(pack_sum, count > 679)
top_counts <- filter(pack_sum, count > 679)
top_counts
view(top_counts)
View(top_counts)
top_counts_sorted <- arrange(top_counts, count)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
source('C:/Users/adam/AppData/Local/Temp/RtmpYp186b/chain1.R')
submit()
source('C:/Users/adam/AppData/Local/Temp/RtmpYp186b/chain2.R')
source('C:/Users/adam/AppData/Local/Temp/RtmpYp186b/chain2.R')
source('C:/Users/adam/AppData/Local/Temp/RtmpYp186b/chain2.R')
submit
submit()
source('C:/Users/adam/AppData/Local/Temp/RtmpYp186b/chain3.R')
submit()
source('C:/Users/adam/AppData/Local/Temp/RtmpYp186b/chain4.R')
source('C:/Users/adam/AppData/Local/Temp/RtmpYp186b/chain4.R')
submit()
library(tidyr)
students
?gether
?gather
gather( students, sex, count, -grade)
students2
res <- gather(students, sex_class, value, -grade)
res <- gather(students2, sex_class, value, -grade)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
submit
submit()
source('C:/Users/adam/AppData/Local/Temp/RtmpYp186b/script1.R')
submit()
students3
source('C:/Users/adam/AppData/Local/Temp/RtmpYp186b/script2.R')
source('~/GitHub/datasciencecoursera/Getting and Cleaning Data/Quiz 3/chain1.R')
source('C:/Users/adam/AppData/Local/Temp/RtmpYp186b/chain2.R')
source('~/GitHub/datasciencecoursera/Getting and Cleaning Data/Quiz 3/chain2.R')
source('~/GitHub/datasciencecoursera/Getting and Cleaning Data/Quiz 3/chain3.R')
source('~/GitHub/datasciencecoursera/Getting and Cleaning Data/Quiz 3/chain4.R')
source('C:/Users/adam/AppData/Local/Temp/RtmpYp186b/summarize1.R')
source('~/GitHub/datasciencecoursera/Getting and Cleaning Data/Quiz 3/summarize1.R')
source('~/GitHub/datasciencecoursera/Getting and Cleaning Data/Quiz 3/script1.R')
source('~/GitHub/datasciencecoursera/Getting and Cleaning Data/Quiz 3/script2.R')
reset()
swril()
swirl()
?gather
student3
students3
source('~/GitHub/datasciencecoursera/Getting and Cleaning Data/Quiz 3/script2.R')
submit()
source('C:/Users/adam/AppData/Local/Temp/RtmpYp186b/script2.R')
students3
source('~/GitHub/datasciencecoursera/Getting and Cleaning Data/Quiz 3/script2.R')
source('~/GitHub/datasciencecoursera/Getting and Cleaning Data/Quiz 3/script2.R')
submit()
?spread
source('~/GitHub/datasciencecoursera/Getting and Cleaning Data/Quiz 3/script3.R')
submit()
source('~/GitHub/datasciencecoursera/Getting and Cleaning Data/Quiz 3/script3.R')
submit()
source('~/GitHub/datasciencecoursera/Getting and Cleaning Data/Quiz 3/script3.R')
submit()
source('C:/Users/adam/AppData/Local/Temp/RtmpYp186b/script3.R')
submit()
library(readr)
parse_number("class5")
?mutate
source('C:/Users/adam/AppData/Local/Temp/RtmpYp186b/script4.R')
submit()
source('~/GitHub/datasciencecoursera/Getting and Cleaning Data/Quiz 3/script4.R')
students4
source('C:/Users/adam/AppData/Local/Temp/RtmpYp186b/script5.R')
submit()
source('C:/Users/adam/AppData/Local/Temp/RtmpYp186b/script6.R')
submit()
source('C:/Users/adam/AppData/Local/Temp/RtmpYp186b/script7.R')
submit()
source('~/GitHub/datasciencecoursera/Getting and Cleaning Data/Quiz 3/script7.R')
passed
failed
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
bind_rows(passed, failed)
sat
?select
source('C:/Users/adam/AppData/Local/Temp/RtmpYp186b/script8.R')
source('C:/Users/adam/AppData/Local/Temp/RtmpYp186b/script8.R')
submit()
source('C:/Users/adam/AppData/Local/Temp/RtmpYp186b/script9.R')
?mutate
source('C:/Users/adam/AppData/Local/Temp/RtmpYp186b/script9.R')
source('C:/Users/adam/AppData/Local/Temp/RtmpYp186b/script9.R')
source('C:/Users/adam/AppData/Local/Temp/RtmpYp186b/script9.R')
submit()
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv'
, 'ACS.csv'
, method='curl' )
# Read data into data.frame
ACS <- read.csv('ACS.csv')
ACS
agricultureLogical <- ACS$ACR == 3 & ACS$AGS == 6
head(which(agricultureLogical), 3)
agricultureLogical
which(agricultureLogical)
library(jpeg)
# Download the file
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg'
, 'jeff.jpg'
, mode='wb' )
picture <- jpeg::readJPEG('jeff.jpg'
, native=TRUE)
install.packages('jpeg')
library(jpeg)
picture <- jpeg::readJPEG('jeff.jpg'
, native=TRUE)
picture
quantile(picture, probs = c(0.3, 0.8) )
# install.packages("data.table)
library("data.table")
# Download data and read FGDP data into data.table
FGDP <- data.table::fread('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv'
, skip=4
, nrows = 190
, select = c(1, 2, 4, 5)
, col.names=c("CountryCode", "Rank", "Economy", "Total")
)
# Download data and read FGDP data into data.table
FEDSTATS_Country <- data.table::fread('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv'
)
FGDP
FEDSTATS_Country
mergedDT <- merge(FGDP, FEDSTATS_Country, by = 'CountryCode')
# How many of the IDs match?
nrow(mergedDT)
mergedDT
mergedDT[order(-Rank)][13,.(Economy)]
arrange(mergedDT, desc(Economy)
)
arrange(mergedDT, desc(Total))
arrange(select(mergedDT,-Rank), desc(Total))
arrange(mergedDT, desc(rank))
arrange(mergedDT, desc(Rank))
mergedDT[order(-Rank)][13,.(Economy)]
mergedDT
mergedDT[`Income Group` == "High income: OECD"
, lapply(.SD, mean)
, .SDcols = c("Rank")
, by = "Income Group"]
mergedDT[`Income Group` == "High income: nonOECD"
, lapply(.SD, mean)
, .SDcols = c("Rank")
, by = "Income Group"]
arrange(mergedDT, desc(Rank))[13, Economy]
arrange(mergedDT, desc(Rank))[13, .Economy]
arrange(mergedDT, desc(Rank))[13, .(Economy)]
arrange(mergedDT, desc(Rank))[13,.(Economy)]
arrange(mergedDT, desc(Rank))[13,(Economy)]
arrange(mergedDT, desc(Rank))[13,Economy]
arrange(mergedDT, desc(Rank))
arrange(mergedDT, desc(Rank))[13, Economy]
tapply(merge$Rank, merge$`Income Group`, mean)
tapply(merge$Rank, merge$"Income Group, mean)
tapply(merge$Rank, merge$'Income Group', mean)
tapply(merge$Rank, merge$'Income Group', mean))
)
)
)
exit
arrange(mergedDT, desc(rank))
break()
arrange(mergedDT, desc(Total))
tapply(merge$Rank, merge$'Income Group', mean))
tapply(merge$Rank, merge$'Income Group', mean)
result<- result[!is.na(result[,2]),]
tapply(result$Rank,result$Income.Group,mean)
tapply(mergedDT$Rank, mergedDT$'Income Group', mean)
mergedDT$RankGroups <- cut(mergedDT$Rank, breaks = 5)
table(mergedDT$RankGroups, mergedDT$'Income Group')
mergedDT$RankGroups
mergedDT
table(mergedDT$RankGroups, mergedDT$'Income Group')
mergedDT$Rank
cut(mergedDT$Rank, breaks = 5)
table(mergedDT$RankGroups, mergedDT$'Income Group')
q()
swirl()
library(swirl)
swirl()
mean(c(2,4,5))
source('C:/Users/adam/AppData/Local/Temp/RtmpC45o4J/boring_function.R')
submit()
boring_function('My first function!')
boring_function
main()
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(pacakage = lubridate)
help(package = lubridate)
today()
this_day <- today()
this_day
month(this_day)
wday(this_day)
wday(this_day, label=TRUE)
now()
this_moment <- now()
this_moment
second(this_moment)
ymd_hms("1989-05-17")
ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May17")
ymd("1989 May 17")
ymd("March 12, 1975")
mdy("March 12, 1975")
dmy(25081985)
ymd(192012)
ymd("192012")
ymd("//192012")
ymd("19201/2")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
update(this_moment, hours = 12, minutes = 59, seconds = 55)
this_moment <- update(this_moment, hours = 12, minutes = 59, seconds = 55)
this_moment
now()
nyc <- now("America/New_Yor")
nyc <- now("America/New_York")
nyc
depart <- nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 59)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrival <- depart + hours(15) + minute(50)
arrive <- depart + hours(15) + minute(50)
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, Asia/Hong_Kong)
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", "Singapore")
last_time = mdy("June 17, 2008", tz="Singapore")
last_time <- mdy("June 17, 2008", tz="Singapore")
last_time
?interval
how_long <- interval(last_time, arrive)
how_long
as.Period(how_long)
as.period(how_long)
stopwatch()
source('~/GitHub/datasciencecoursera/Getting and Cleaning Data/ProgrammingAssignment/run_analysis.R')
library(reshape2)
source('~/GitHub/datasciencecoursera/Getting and Cleaning Data/ProgrammingAssignment/run_analysis.R')
x <- c(2,4,3,5)
x[c(-1,2,3,4)]
x[c(-1,0,0,0)]
?cor.test
swirl()
library(swirl)
swirl()
?Devices
plot()
plot(x,y)
plot(eruptions, waiting)
plot(eruptions, waiting)
plot(faithful$eruptions, faithful$waiting)
with(faithful, plot(eruptions, waiting)
)
main("Old Faithful Geyser data")
with(faithful, plot(eruptions, waiting, main="Old Faithful Geyser data"))
title(main="Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting, main="Old Faithful Geyser data"))
with(faithful, plot(eruptions, waiting)
)
title(main="Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.copy(png,geyserplot.png)
dev.copy(png, file = geyserplot.png)
dev.copy(png, fileset = geyserplot.png)
dev.copy(png, geyserplot.png)
dev.copy(png, 'geyserplot.png')
dev.copy(png, file = "geyserplot.png")
dev.off()
esc
exit
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
with(faithful, plot(eruptions, waiting))
dir()
dir()
download.file('https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip'
, 'household_power_consumption.zip'
, method='curl' )
unzip("household_power_consumption.zip", files = NULL, exdir=".")
getwd()
dir()
power_consumption <- read.table("household_power_consumption.txt")
nrow(power_consumption)
head(power_consumption)
help(\color{red}{\verb|strptime()|}strptime() )
help(strptime
)
help(read.table)
power_consumption[Date='2007-02-01']
power_consumption[Global_reative_power=4.216]
power_consumption[Global_reative_power==4.216]
power_consumption[power_consumption$Global_reative_power==4.216]
power_consumption[power_consumption$Global_ative_power==4.216]
power_consumption[power_consumption$Global_ative_power<4.216]
library(dplyr)
power_consumption[power_consumption$Global_ative_power<4.216]
power_consumption[Global_ative_power==4.216]
Mgmt <- c(4,5,6)
Mgmt
filter(power_consumption,Global_ative_power==4.216]
filter(power_consumption,Global_ative_power==4.216)
help("read.table")
filter(power_consumption,Global_ative_power==4.216)
power_consumption
header(power_consumption)
head(power_consumption)
filter(power_consumption,Global_active_power==4.216)
dplyr::filter(power_consumption,Global_active_power==4.216)
library(dplyr)
dplyr::filter(power_consumption,Global_active_power==4.216)
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
dplyr::filter(power_consumption,Global_active_power==4.216)
detach("package:dplyr")
dplyr::filter(power_consumption,Global_active_power==4.216)
detach("package:stats")
library(stats)
library(dplyr)
dplyr::filter(power_consumption,Global_active_power==4.216)
stats::filter(power_consumption,Global_active_power==4.216)
dplyr::filter(power_consumption,grepl(4.216,Global_active_power)
)
dplyr::filter(power_consumption,grepl("4.216",Global_active_power))
head(power_consumption)
dplyr::filter(power_consumption,grepl("16/12/2006",Date))
help(read.table)
power_consumption <- read.table(header = "True","household_power_consumption.txt")
power_consumption <- read.table(header = True,"household_power_consumption.txt")
power_consumption <- read.table(header = TRUE,"household_power_consumption.txt")
power_consumption[Global_ative_power==4.216]
power_consumption[Global_active_power==4.216]
nrow(power_consumption)
head(power_consumption)
View(power_consumption)
help(read.table)
View(power_consumption)
power_consumption <- read.table(header = TRUE,sep = ";","household_power_consumption.txt")
View(power_consumption)
nrow(power_consumption)
head(power_consumption)
power_consumption[Global_active_power==4.216]
power_consumption[Global_active_power<4.216]
dplyr::filter(power_consumption,grepl("16/12/2006",Date))
filter(power_consumption,Global_active_power==4.216)
power_consumption[Global_active_power<4.216]
filter(power_consumption,Date>='2007-02-01'&Date<='2007-02-02')
View(power_consumption)
View(power_consumption)
filter(power_consumption,Date>=as.Date('2007-02-01')&Date<=as.Date('2007-02-02')
)
filter(power_consumption,Date==as.Date('2007-02-01')&Date==as.Date('2007-02-02')
)
power_consumption$Date <-as.Date(power_consumption$Date,"%d/%m/%Y")
filter(power_consumption,Date>='2007-02-01'&Date<='2007-02-02')
sample <- filter(power_consumption,Date>='2007-02-01'&Date<='2007-02-02')
sample
View(sample)
dt07Feb <- filter(power_consumption,Date>='2007-02-01'&Date<='2007-02-02')
nrow(power_consumption)
head(power_consumption)
dt07Feb <- filter(power_consumption,Date>='2007-02-01' & Date<='2007-02-02')
dt <- filter(power_consumption,Date>='2007-02-01' & Date<='2007-02-02')
filter(power_consumption,Date>='2007-02-01' & Date<='2007-02-02')
dt <- filter(power_consumption, Date>='2007-02-01' & Date<='2007-02-02')
library(dplyr)
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
dt <- filter(power_consumption, Date>='2007-02-01' & Date<='2007-02-02')
View(dt)
with(dt, plot(global_active_power,frequence))
head(dt)
with(dt, plot(Global_active_power))
library(datasets)
hist(dt$Global_active_power)
dt
hist(dt$Global_active_power)
library(datasets)
hist(dt$Global_active_power)
View(sample)
View(dt)
power_consumption$Global_active_power <-as.numeric(power_consumption$Global_active_power)
dt <- filter(power_consumption, Date>='2007-02-01' & Date<='2007-02-02')
hist(dt$Global_active_power)
dt
help("as.numeric")
power_consumption$Global_active_power <- as.numeric(power_consumption$Global_active_power)
dt
power_consumption <- read.table(header = TRUE,sep = ";","household_power_consumption.txt")
dir()
unzip("household_power_consumption.zip", files = NULL, exdir=".")
power_consumption <- read.table(header = TRUE,sep = ";","household_power_consumption.txt")
power_consumption$Date <- as.Date(power_consumption$Date,"%d/%m/%Y")
dt <- filter(power_consumption, Date >= '2007-02-01' & Date <= '2007-02-02')
dt
dt$Global_active_power <- as.numeric(dt$Global_active_power)
hist(dt$Global_active_power)
dt <- filter(power_consumption, Date >= '2007-02-01' & Date <= '2007-02-02')
hist(dt$Global_active_power)
dplyr(dt)
library(dplyr)
library(datasets)
dplyr(dt)
library(datasets)
hist(dt$Global_active_power)
dt$Global_active_power
as.numeric(dt$Global_active_power)
?mutate
dt$Global_active_power <- as.numeric(as.character(dt$Global_active_power))
hist(dt$Global_active_power)
?hist
hist(dt$Global_active_power, xlab="Global Active Power (kilowatts)")
title(main="Global Active Power")
?hist
hist(dt$Global_active_power, xlab="Global Active Power (kilowatts)", main="Global Active Power")
?hist
hist(dt$Global_active_power, col = "red", xlab="Global Active Power (kilowatts)", main="Global Active Power")
?png
png(file="plot1.png")
hist(dt$Global_active_power, col = "red", xlab="Global Active Power (kilowatts)", main="Global Active Power")
dev.off()
dev.off()
dev.off()
png(file="plot1.png")
hist(dt$Global_active_power, col = "red", xlab="Global Active Power (kilowatts)", main="Global Active Power")
dev.off()
install.packages('vscDebugger')
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
Sys.which("make")
Sys.which("make")
Sys.which("make")
